# === app_credito.py ===
import streamlit as st
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
from datetime import datetime
import os
import sys
import numpy as np
import eli5
from eli5.sklearn import PermutationImportance
import streamlit.components.v1 as components
from PIL import Image

# === Configura√ß√£o inicial ===
st.set_page_config(
    page_title="Simulador de Cr√©dito Ventture",
    page_icon="assets/ventture_icon.png",  # coloque o √≠cone aqui
    layout="wide"
)

# === Estilo Ventture Consulting ===
st.markdown("""
    <style>
        /* Fundo geral */
        .stApp {
            background-color: #FFFFFF;
        }
        /* T√≠tulos principais */
        h1, h2, h3 {
            color: #1E90FF !important;
            font-family: 'Segoe UI', sans-serif !important;
        }
        /* Texto normal */
        p, label, span {
            color: #1B1B1B !important;
            font-family: 'Segoe UI', sans-serif !important;
        }
        /* Sidebar */
        [data-testid="stSidebar"] {
            background-color: #F8F9FA;
        }
        /* Bot√µes */
        .stButton>button {
            background-color: #1E90FF;
            color: white;
            border-radius: 8px;
            height: 2.5em;
            width: 100%;
        }
        .stButton>button:hover {
            background-color: #0078D7;
            color: #FFFFFF;
        }
        /* Rodap√© */
        footer {
            visibility: hidden;
        }
    </style>
""", unsafe_allow_html=True)

st.markdown("""
    <style>
        header[data-testid="stHeader"] {
            display: none !important;
        }
        div.block-container {
            padding-top: 1rem;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üí≥ Simulador Inteligente de Concess√£o de Cr√©dito")

# === Carregar modelo e scaler ===
# Caminhos corretos para modelo e scaler
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ARQUIVO_MODELO = os.path.join(BASE_DIR, "model", "modelo_credito.pkl")
ARQUIVO_SCALER = os.path.join(BASE_DIR, "model", "scaler.pkl")
@st.cache_resource
def carregar_modelo():
    modelo = joblib.load(ARQUIVO_MODELO)
    scaler = joblib.load(ARQUIVO_SCALER)
    return modelo, scaler

modelo, scaler = carregar_modelo()

# === Caminho do arquivo de hist√≥rico ===
arquivo_historico = "historico_simulacoes.csv"

# === Defini√ß√£o das abas ===
aba_simulador, aba_analise = st.tabs(["üè¶ Simulador de Cr√©dito", "üìä An√°lises do Hist√≥rico"])

# ========================================================
# üè¶ ABA 1 ‚Äì SIMULADOR
# ========================================================
with aba_simulador:
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    logo_path = os.path.join(BASE_DIR, "assets", "ventture.jpg")
    logo = Image.open(logo_path)
    st.sidebar.image(logo, width=150)
    st.sidebar.header("üìã Dados do Cliente")

    renda = st.sidebar.number_input("Renda Mensal (R$)", min_value=500.0, max_value=100000.0, value=8000.0, step=500.0)
    idade = st.sidebar.number_input("Idade", min_value=18, max_value=90, value=35, step=1)
    valor_credito = st.sidebar.number_input("Valor do Cr√©dito Solicitado (R$)", min_value=1000.0, max_value=500000.0, value=50000.0, step=1000.0)
    valor_bem = st.sidebar.number_input("Valor da Garantia (R$)", min_value=1000.0, max_value=1000000.0, value=80000.0, step=1000.0)
    liquidez = st.sidebar.selectbox("Liquidez da Garantia", ["baixa", "media", "alta"])

    # === Cria√ß√£o das features ===
    liquidez_score = {"baixa": 1, "media": 2, "alta": 3}[liquidez]
    relacao_garantia_credito = valor_bem / (valor_credito + 1)
    renda_por_idade = renda / (idade + 1)
    garantia_ponderada = relacao_garantia_credito * liquidez_score

    # Montar dataframe para previs√£o
    # df_cliente = pd.DataFrame([{
    #    "renda": renda,
    #    "idade": idade,
    #   "valor_credito": valor_credito,
    #    "valor_bem": valor_bem,
    #    "relacao_garantia_credito": relacao_garantia_credito,
    #    "liquidez_score": liquidez_score,
    #    "renda_por_idade": renda_por_idade,
    #    "garantia_ponderada": garantia_ponderada
    #}])
    # Adiciona a pasta src ao sys.path para permitir import
    sys.path.append(os.path.join(os.path.dirname(__file__), "..", "src"))

    from preprocess import criar_features_cliente

    df_cliente = criar_features_cliente(
        renda_mensal=renda,
        idade=idade,
        valor_solicitado=valor_credito,
        valor_bem=valor_bem,
        liquidez=liquidez
    )

    # === Normaliza√ß√£o ===
    X_scaled = scaler.transform(df_cliente)

    # === Previs√£o ===
    prob = modelo.predict_proba(X_scaled)[0][1]
    aprovado = int(prob >= 0.5)

    st.subheader("üîç Resultado da An√°lise")
    if aprovado:
        st.success(f"‚úÖ Cr√©dito Aprovado! Probabilidade de aprova√ß√£o: **{prob:.2%}**")
    else:
        st.error(f"‚ùå Cr√©dito Negado. Probabilidade de aprova√ß√£o: **{prob:.2%}**")

    # === Gravar no hist√≥rico ===
    novo_registro = pd.DataFrame([{
        "data_hora": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "renda": renda,
        "idade": idade,
        "valor_credito": valor_credito,
        "valor_bem": valor_bem,
        "liquidez": liquidez,
        "prob_aprovacao": round(prob, 4),
        "aprovado": "Sim" if aprovado else "N√£o"
    }])

    if os.path.exists(arquivo_historico):
        historico = pd.read_csv(arquivo_historico)
        historico = pd.concat([historico, novo_registro], ignore_index=True)
    else:
        historico = novo_registro

    historico.to_csv(arquivo_historico, index=False)

    # === Explicabilidade com SHAP ===
    st.subheader("üìä Explica√ß√£o da Decis√£o (ELI5)")

    # Criar permuta√ß√£o de import√¢ncia baseado no modelo treinado
    perm = PermutationImportance(modelo, random_state=42)
    perm.fit(X_scaled, [aprovado])  # aqui usamos a previs√£o como refer√™ncia

    # Gerar explica√ß√£o em HTML
    html_obj = eli5.show_weights(
        perm,
        feature_names=df_cliente.columns.tolist(),
        top=8  # mostrar as 8 features mais importantes
    )

    # Adicionar estilo CSS para azul
    html_styled = f"""
    <style>
        body {{
            color: #1E90FF;  /* azul DodgerBlue */
            font-family: Arial, sans-serif;
        }}
        table {{
            color: #1E90FF;
        }}
    </style>
    {html_obj.data}
    """

    # Renderizar no Streamlit
    components.html(html_styled, height=400, scrolling=True)



    # Import√¢ncia das vari√°veis
    # st.write("### Impacto das vari√°veis na decis√£o:")
    # fig2, ax2 = plt.subplots()
    #shap.summary_plot(shap_values[1], df_cliente, plot_type="bar", show=False)
    # st.pyplot(fig2)

    st.caption("Desenvolvido por Ventture Consulting ‚Ä¢ Modelo: Random Forest + SHAP ‚Ä¢ ¬© 2025")

# ========================================================
# üìä ABA 2 ‚Äì AN√ÅLISES
# ========================================================
with aba_analise:

    st.subheader("üìà An√°lises do Hist√≥rico de Simula√ß√µes")

    if not os.path.exists(arquivo_historico):
        st.warning("Nenhum hist√≥rico dispon√≠vel ainda. Fa√ßa uma simula√ß√£o para come√ßar!")
    else:
        historico = pd.read_csv(arquivo_historico)

        # KPIs principais
        total = len(historico)
        taxa_aprovacao = (historico['aprovado'].eq("Sim").mean()) * 100
        media_prob = historico['prob_aprovacao'].mean() * 100

        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Simula√ß√µes", total)
        col2.metric("Taxa de Aprova√ß√£o", f"{taxa_aprovacao:.1f}%")
        col3.metric("Probabilidade M√©dia", f"{media_prob:.1f}%")

        # Gr√°fico 1: Taxa de aprova√ß√£o por liquidez
        st.write("### Aprova√ß√£o por n√≠vel de liquidez")
        fig1, ax1 = plt.subplots(figsize=(6, 4))  # menor que o original
        taxa_por_liquidez = historico.groupby("liquidez")["aprovado"].apply(lambda x: (x == "Sim").mean() * 100)
        taxa_por_liquidez.plot(kind="bar", ax=ax1, color="#1E90FF")
        plt.ylabel("% de Aprova√ß√£o")
        plt.xlabel("Liquidez")
        plt.tight_layout()
        st.pyplot(fig1)

        # Gr√°fico 2: Distribui√ß√£o da renda
        st.write("### Distribui√ß√£o das rendas dos clientes")
        fig2, ax2 = plt.subplots(figsize=(6, 4))
        historico['renda'].plot(kind="hist", bins=10, ax=ax2, color="#87CEFA")
        plt.xlabel("Renda (R$)")
        plt.tight_layout()
        st.pyplot(fig2)

        # Gr√°fico 3: Probabilidade m√©dia por faixa de cr√©dito
        st.write("### Probabilidade m√©dia por faixa de valor de cr√©dito solicitado")
        historico['faixa_credito'] = pd.cut(
            historico['valor_credito'],
            bins=[0, 50000, 150000, 300000, 500000],
            labels=["At√© 50k", "50‚Äì150k", "150‚Äì300k", "300‚Äì500k"]
        )
        fig3, ax3 = plt.subplots(figsize=(6, 4))
        historico.groupby('faixa_credito')['prob_aprovacao'].mean().plot(kind='bar', ax=ax3, color="#1E90FF")
        plt.ylabel("Probabilidade m√©dia")
        plt.tight_layout()
        st.pyplot(fig3)

        # Exibir tabela
        st.write("### Hist√≥rico Completo")
        st.dataframe(historico.tail(20).sort_values(by="data_hora", ascending=False))

        # Bot√£o para limpar hist√≥rico
        if st.button("üóëÔ∏è Limpar hist√≥rico"):
            os.remove(arquivo_historico)
            st.warning("Hist√≥rico apagado!")
